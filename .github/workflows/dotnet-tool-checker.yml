name: .NET tool checker

on:
  workflow_call:
    secrets:
      DOTNET_UPDATER_APP_ID:
        required: true
      DOTNET_UPDATER_PRIVATE_KEY:
        required: true

env:
  workflow_id: dotnet-tool-updater.yml

jobs:
  check:
    runs-on: ubuntu-latest

    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v1.6.0
        with:
          app_id: ${{ secrets.DOTNET_UPDATER_APP_ID }}
          private_key: ${{ secrets.DOTNET_UPDATER_PRIVATE_KEY }}

      - name: Check out repository
        uses: actions/checkout@v3.0.2

      - name: Get local tools
        id: project
        run: |
          _tools="$(jq -r '.tools | map_values(.version) | to_entries | map({ "package-name": .key, "package-version": .value })' ./.config/dotnet-tools.json)"
          _tools="${_tools//'%'/'%25'}"
          _tools="${_tools//$'\n'/'%0A'}"
          _tools="${_tools//$'\r'/'%0D'}"
          echo "::set-output name=tools::${_tools}"

      - name: Dispatch events
        uses: actions/github-script@v6.3.1
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            async function asyncForEach(array, callback) {
              for (let index = 0; index < array.length; index++) {
                await callback(array[index], index, array);
              }
            }

            const projects = JSON.parse(process.env["project_tools"]);
            const summary = [
              [
                {
                  header: true,
                  data: "Name",
                },
                {
                  header: true,
                  data: "Current version",
                },
              ],
            ];

            await asyncForEach(projects, async (project) => {
              summary.push([
                project["package-name"],
                `<a href="https://www.nuget.org/packages/${project["package-name"]}/${project["package-version"]}">${project["package-version"]}</a>`,
              ]);

              await github.request("POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches", {
                ...context.repo,
                ref: context.ref,
                workflow_id: "${{ env.workflow_id }}",
                inputs: project,
              });
            });

            await core
              .summary
              .addHeading("Packages checked")
              .addTable(summary)
              .write();
        env:
         project_tools: ${{ steps.project.outputs.tools }}
